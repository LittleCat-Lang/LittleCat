# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  discord: teka23/discord@0.0.1

jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Update APT
          command: |
            sudo apt update

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      - store_test_results:
          path: ~/test-results

      - store_artifacts:
          path: ~/test-results/junit

      - run:
          name: Artifacts
          command: |
            gradle appJar

      - run:
          name: NSIS
          command: |
            sudo apt-get install nsis
            cp ./build/libs/app* ./lclang.jar
            makensis ./installer_configuration.nsi

            cp ./*.exe ./build/libs/windows.exe

      - run:
          name: Debian Package
          command: |
            sudo apt-get install dpkg debconf debhelper lintian hashdeep

            mkdir lclang
            mkdir -p lclang/DEBIAN
            mkdir -p lclang/usr/bin
            mkdir -p lclang/usr/share/lclang/bin

            cp debian.conf lclang/DEBIAN/control
            cp LICENSE lclang/DEBIAN/copyright
            cp -R libs lclang/usr/share/lclang/libs
            cp build/libs/app* lclang/usr/share/lclang/bin/lclang.jar
            cp lclang.sh lclang/usr/bin/lclang
            md5deep -r lclang/usr > lclang/DEBIAN/md5sums

            STAGING_DIR=$(readlink --canonicalize "./lclang")

            find "${STAGING_DIR}" -type d -exec chmod 0755 {} \;  #set directory attributes
            find "${STAGING_DIR}" -type f -exec chmod 0644 {} \;  #set data file attributes
            find "${STAGING_DIR}/usr/bin" -type f -exec chmod 0755 {} \;  #set executable attributes

            fakeroot dpkg-deb --build lclang
            cp ./*.deb ./build/libs/debian.deb
      - store_artifacts:
          path: build/libs
          destination: build

      - discord/status:
          webhook: ${DISCORD_WEBHOOK_URL}
          fail_only: true
          failure_mentions: '&863831055139078164'
          failure_message: ":pensive:  Job failed"
      - discord/notify:
          webhook: ${DISCORD_WEBHOOK_URL}
          color: '4052034'
          message: ":clap:  All done"
          include_job_number_field: false
          include_project_field: false
