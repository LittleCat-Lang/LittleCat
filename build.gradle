plugins {
    id 'java-library'
    id 'antlr'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
}

sourceSets.main.java.srcDirs 'src/main/gen'

group 'lclang'
version '0.1.1'

repositories {
    mavenCentral()
    maven{ url 'https://jitpack.io' }
}

dependencies {
    antlr 'org.antlr:antlr4:4.9.2'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'com.github.albfernandez:juniversalchardet:2.4.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.21'

    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task appJar(type: Jar, dependsOn: classes) {
    archivesBaseName = "app"
    manifest.attributes "Main-Class": "lclang.MainKt"

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    with jar
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/build.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "com.github.lclang"
            artifactId = project.archivesBaseName
            version = project.version

            pom {
                name = 'Little Cat language'
                description = 'Interpreter code'
                url = 'https://github.com/lclang/littlecat'
                licenses {
                    license {
                        name = 'Apache 2-0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'levkopo'
                        name = 'Lev Koporushkin'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/lclang/littlecat.git'
                    developerConnection = 'scm:git:ssh://github.com/lclang/littlecat.git'
                    url = 'https://github.com/lclang/littlecat'
                }
            }

            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
        showExceptions = true
        showCauses = true
    }
}